// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IconButtonBar renders the 'lg' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--lg"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--lg"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the 'md' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--md"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="md"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="md"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--md"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the 'sm' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--sm"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="sm"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="sm"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--sm"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the 'xl' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--xl"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="xl"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="xl"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--xl"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the length of '1' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--lg"
>
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--lg"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 2"
      key="Label 2"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 1"
      key="Label 1"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the length of '2' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--lg"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--lg"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 2"
      key="Label 2"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the length of '3' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--lg"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <ForwardRef(OverflowMenu)
    className="security--icon-button-bar__overflow-menu"
    direction="top"
    flipped={true}
    menuOptionsClass="security--icon-button-bar__overflow-menu-options--lg"
    renderIcon={[Function]}
  >
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 4"
      key="Label 4"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={true}
    />
    <OverflowMenuItem
      disabled={false}
      hasDivider={false}
      isDelete={false}
      itemText="Label 3"
      key="Label 3"
      onClick={[Function]}
      onKeyDown={[Function]}
      primaryFocus={false}
    />
  </ForwardRef(OverflowMenu)>
</div>
`;

exports[`IconButtonBar renders the length of '4' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--lg"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 3"
    label="Label 3"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 4"
    label="Label 4"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
</div>
`;

exports[`IconButtonBar renders the length of '5' variation 1`] = `
<div
  className="security--icon-button-bar security--icon-button-bar--lg"
>
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 1"
    label="Label 1"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 2"
    label="Label 2"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 3"
    label="Label 3"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
  <IconButton
    className="class"
    disabled={false}
    iconClassName="class"
    iconSize={20}
    key="Label 4"
    label="Label 4"
    onClick={[Function]}
    path={null}
    renderIcon={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    size="lg"
    state={false}
    tooltip={true}
    tooltipDirection="top"
  />
</div>
`;

/**
 * @file Data table table subcomponent.
 * @copyright IBM Security 2019
 */

import React, { Component } from 'react';
import { debounce } from 'throttle-debounce';
import { Table as CarbonTable } from 'carbon-components-react/lib/components/DataTable';
import { tableWrapperNamespace, overflowCellNamespace } from './constants';
import { carbonPrefix } from '../../globals/namespace';
import theme from '../../globals/theme';
import ScrollGradient from '../ScrollGradient/ScrollGradient';

/**
 * Proxies Carbon Table component wrapped in a div with a class to set overflow
 * scroll on the table.
 */
class Table extends Component {
  componentDidMount = () => {
    if (this.hasOverflowMenus(this.scrollContainer)) {
      window.addEventListener('resize', this.debouncedPositionOverflowMenus);
      this.positionOverflowMenus(this.scrollContainer);
    }
  };

  componentDidUpdate = () => {
    this.positionOverflowMenus(this.scrollContainer);
  };

  componentWillUnmount = () =>
    window.removeEventListener('resize', this.handleWindowResize);

  /**
   * Positions overflow menus based on the scroll position of the table container.
   */
  positionOverflowMenus = tableWrapper => {
    if (this.hasOverflowMenus(tableWrapper)) {
      const { scrollLeft, clientWidth, scrollWidth } = tableWrapper;
      [
        ...tableWrapper.querySelectorAll(
          `.${overflowCellNamespace} .${carbonPrefix}overflow-menu`
        ),
      ].forEach(overflow => {
        // eslint-disable-next-line no-param-reassign
        overflow.style.transform = `translateX(${scrollLeft +
          clientWidth -
          scrollWidth}px)`;
      });
    }
  };

  /**
   * Debounced version of function to position overflow menus. This one is used to debounce the
   * execution of this function.
   * @param {HTMLElement} target Element that would contain overflow menus to position.
   * @returns {Function} Debounced overflow positioning function.
   */
  debouncedPositionOverflowMenus = debounce(250, () =>
    this.positionOverflowMenus(this.scrollContainer)
  );

  /**
   * Handles window resize and positions overflow menus so it is always visible.
   */
  handleWindowResize = () =>
    this.debouncedPositionOverflowMenus(this.container.current);

  /**
   * Handles the scroll event of the table event.
   * @param {{ target: HTMLElement }}  event Event generated by scroll event.
   */
  handleScroll = ({ target }) => this.positionOverflowMenus(target);

  /**
   * Checks that table contains any overflow menus.
   * @returns {boolean} Whether or not table conatins any overflow menus.
   */
  hasOverflowMenus = tableWrapper =>
    tableWrapper.querySelectorAll(`td.${overflowCellNamespace}`).length > 0;

  /**
   * @type {HTMLElement} DOM reference to table container.
   */
  scrollContainer = null;

  render = () => (
    <ScrollGradient
      className={tableWrapperNamespace}
      color={theme.ui01}
      getScrollElementRef={element => {
        this.scrollContainer = element;
      }}
      direction={ScrollGradient.ScrollDirection.X}
      onScroll={this.handleScroll}
    >
      <CarbonTable {...this.props} />
    </ScrollGradient>
  );
}

Table.propTypes = CarbonTable.propTypes;
Table.defaultProps = CarbonTable.defaultProps;

export default Table;

////
/// Theme helpers.
/// @group theme
/// @copyright IBM Security 2019 - 2020
////

@import '@carbon/themes/scss/mixins';

@import '../../components/Component/mixins';
@import '../deprecate/index';
@import '../feature-flags/index';

@import 'functions';
@import 'variables';

// TODO: `2.x` - To be removed.

/// Security theme.
/// @type Map<String, Color>
$security--theme: $carbon--theme--g100 !default;

/// Default theme.
/// @type Map<String, Color>
/// @access private
$-theme: security--type-tokens-remove(
  $theme: $security--theme,
);

@if feature-flag-enabled($feature: $theme__name) {
  // Map the theme tokens as CSS custom properties.
  @each $token, $value in $-theme {
    $-theme: map-merge(
      $map1: $-theme,
      $map2: (
        $token: var(--#{$token}, $value),
      ),
    );
  }
}

/// Carbon theme.
/// @type Map<String, Color>
$carbon--theme: $-theme;

@include carbon--theme;

@import 'carbon-components/scss/globals/scss/theme';

@import 'mixins';

// TODO: `2.x` - To be removed after the `theme` function is deprecated.

/// Dark theme.
/// @type String
/// @access private
/// @deprecated
$theme: dark;

/// Handles theme switching between light and dark.
/// @param {Color} $light The light color to use.
/// @param {Color} $dark The dark color to use.
/// @returns {Color} The determined theme color to use.
/// @access private
/// @deprecated
@function theme($light, $dark) {
  @warn deprecate($actual: 'theme', $expected: '@carbon/themes');

  @return if($theme == dark, $dark, $light);
}

@include security--component($name: input__background__color--light) {
  @include input__background-color;
}

@if feature-flag-enabled($feature: $theme__name) {
  // Outputs the relevant classes for each supported theme - `$carbon--theme` is required to be set before this can occur.
  @each $theme, $tokens in $security--themes {
    @include security--component($name: $theme) {
      @include security--generate-css-custom-properties($theme: $tokens);
    }
  }
}
